import numpy as np

def initialize_PLUSrs(n,t):
    
    TY = 1
    TnY = 1
    
    TA = np.ones((n,t), dtype=np.int64)
    TnA = np.ones((n,t), dtype=np.int64)
    TAY = np.ones((n,t), dtype=np.int64)
    TAnY = np.ones((n,t), dtype=np.int64)
    TnAY = np.ones((n,t), dtype=np.int64)
    TnAnY = np.ones((n,t), dtype=np.int64)
    
    data = {}
    
    data = {'TY' : TY,
        'TnY' : TnY,
        'TA' : TA,
        'TnA' : TnA,
        'TAY' : TAY,
        'TAnY' : TAnY,
        'TnAY' : TnAY,
        'TnAnY' : TnAnY}
    
    return data
    

def PLUSr(i, A, n, data, y, L):
    TY = data['TY']
    TnY = data['TnY']
    TA = data['TA']
    TnA = data['TnA']
    TAY = data['TAY']
    TAnY = data['TAnY']
    TnAY = data['TnAY']
    TnAnY = data['TnAnY']
    
    if L:
        TA[i,0:n] += A[0:n]
        TnA[i,0:n] += 1 - A[0:n]
        TAY[i,0:n] += A[0:n] * y
        TAnY[i,0:n] += A[0:n] * (1-y)
        TnAY[i,0:n] += (1-A[0:n]) * y
        TnAnY[i,0:n] += (1-A[0:n]) * (1-y)
    
    R = 0
    for j in range(n):
        if A[j]:
            R = R + TnY * TnA[i,j] * TAY[i,j] - TY * TnA[i,j] * TAnY[i,j] - TnY * TA[i,j] * TnAY[i,j] + TY * TA[i,j] * TnAnY[i,j]
        else:
            R = R - TnY * TnA[i,j] * TAY[i,j] + TY * TnA[i,j] * TAnY[i,j] + TnY * TA[i,j] * TnAY[i,j] - TY * TA[i,j] * TnAnY[i,j]
        
    if R < 0:
        Z = 0.0
    elif R == 0:
        Z = 0.5
    else:
        Z = 1.0
        
    data = {'TY' : TY,
        'TnY' : TnY,
        'TA' : TA,
        'TnA' : TnA,
        'TAY' : TAY,
        'TAnY' : TAnY,
        'TnAY' : TnAY,
        'TnAnY' : TnAnY}
    
    return R, Z, data
        
